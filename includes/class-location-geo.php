<?phpclass LOCATION_GEO{	/**	 * This is a unique identifier of plugin.	 */	protected $plugin_name;	protected $version;	/**	 * The core functionality of the plugin.	 *	 */	public function __construct() {		if ( defined( 'LOCATION_GEO_VERSION' ) ) {			$this->version = LOCATION_GEO_VERSION;		} else {			$this->version = '1.0';		}		$this->plugin_name = 'location-geo';		$this->load_dependencies();        $this->define_admin_hooks();        $this->include_public_hooks();        $this->max_sb_shortcodes();	}	/**	 * Load the required dependencies.	 *	 * Include the required files:	 *	 */	private function load_dependencies() {        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/settings/fields-settings.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/class-location-geo-admin.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-location-geo-shortcodes.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-location-geo-settings.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'public/class-location-geo-public.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/settings/fields-design.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-location-geo-loader.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/plugin-update-checker/plugin-update-checker.php';		$this->loader = new LOCATION_GEO_Loader();        $myUpdateChecker = new PluginUpdateChecker_3_1 (            'https://plugins.maxenius.com/wp-json/max_verify_licenses/v1/get_plugin_metadata/?action=get_plugin_metadata&slug=location-geo',            plugin_dir_path( dirname( __FILE__ ) ) .'location-geo.php', //Full path to the main plugin file or functions.php.            'location-geo'        );	}	/**	 * Register admin hooks	 * of the plugin.	 *	 */	private function define_admin_hooks() {		$plugin_admin = new LOCATION_GEO_Admin( $this->get_plugin_name(), $this->get_version() );        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );        $this->loader->add_action( 'wp_ajax_nopriv_max_plugin_license_verify', $plugin_admin, 'max_plugin_license_verify' );        $this->loader->add_action( 'wp_ajax_max_plugin_license_verify', $plugin_admin, 'max_plugin_license_verify' );	}    private function max_sb_shortcodes() {        $shortcode_admin = new LOCATION_GEO_Shortcodes( $this->get_plugin_name(), $this->get_version() );        add_shortcode( 'max-neighborhoods', array($shortcode_admin, 'neighborhood') );        add_shortcode( 'max-activities', array($shortcode_admin, 'activities') );        add_shortcode( 'max-map', array($shortcode_admin, 'map') );        add_shortcode( 'max-details', array($shortcode_admin, 'about_location') );//        add_shortcode( 'max-directions', array($shortcode_admin, 'directions') );        add_shortcode( 'max-driving-dir', array($shortcode_admin, 'airports') );    }	/**	 * Register public hooks	 *	 */	private function include_public_hooks() {		$plugin_public = new LOCATION_GEO_Public( $this->get_plugin_name(), $this->get_version() );        $this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_styles' );        $this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_scripts', 30 );	}    /**     * Run the loader.     *     */    public function max_run() {        $this->loader->max_run();    }	/**	 * The name of the plugin	 *	 */	public function get_plugin_name() {		return $this->plugin_name;	}	/**	 * The version number of the plugin.	 */	public function get_version() {		return $this->version;	}}